# -*- python -*-

import os
import sys

top = '.'
out = 'out'

def configure(cfg):
    dist = cfg.path.parent.parent.abspath()
    sys.path.insert(0, os.path.join(dist,'python'))
    import nuosc

    cfg.env.config_file = 'og.cfg'
    cfg.env.configurations = nuosc.config_sections(cfg.env.config_file)

    return


def build(bld):
    import nuosc

    nops = [x+'.nop' for x in bld.env.configurations]

    # transform one configuration file into many .nop files
    def cfg2nops(task):
        nuosc.cfg2nops(task.inputs[0].abspath(), bld.env.configurations,
                       [x.abspath() for x in task.outputs])
    bld(rule = cfg2nops, source = bld.env.config_file, target = nops)

    # transform a nop file into a nod file 
    def nop2nod(task):
        nuosc.nop2nod(task.inputs[0].abspath(),
                      task.outputs[0].abspath())
    from waflib import TaskGen
    TaskGen.declare_chain(name = 'nop2nod', rule = nop2nod,
                          ext_in = '.nop', ext_out = '.nod', 
                          reentrant = False)
    bld(source = nops)
        
    print 'PARALLEL with %d jobs' % bld.jobs

    def plot_oscillogram_external(task):
        cmd = ['python'] + [x.abspath() for x in task.inputs]
        cmd.append(task.outputs[0].abspath())
        task.exec_command(' '.join(cmd))

    for nop, cfg in zip(nops, bld.env.configurations):
        for ext in ['.pdf','.svg','.png']:
            if cfg.startswith('oscillogram_'):
                bld(rule = plot_oscillogram_external,
                    source = ['plot_og.py']+[nop, nop.replace('.nop','.nod')],
                    target = nop.replace('.nop', ext))

    def plot_energy(task):
        cmd = ['python', task.inputs[0].abspath(), task.outputs[0].abspath()] 
        cmd += [x.abspath() for x in task.inputs[1:]]
        task.exec_command(' '.join(cmd))        
    for nuanu in ['nu','anu']:
        for noro in ['no','ro']:
            for ext in ['.pdf','.svg','.png']:
                name = 'energy_%s_%s' % (nuanu, noro)
                cfgs = [x for x in bld.env.configurations if name in x]
                en_nops = [c+'.nop' for c in cfgs]
                en_nods = [c+'.nod' for c in cfgs]
                bld(rule = plot_energy,
                    source = ['plot_en.py'] + en_nops + en_nods,
                    target = name + ext)
