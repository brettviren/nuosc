#!/usr/bin/env python
'''
Run some of the tests under waf
'''

#import os

def configure(cfg):
    cfg.find_program('convert',var='IM_CONVERT')
    return

def build(bld):

    bld.add_group()

    # def run_nuosc(task):
    #     nuoscexe = task.generator.bld.path.get_bld().parent.find_resource('nuosc').abspath()
    #     #nuoscexe = task.inputs[0].abspath()
    #     cmdl_file = task.inputs[0].abspath()
    #     data_file = task.outputs[0].abspath()
    #     print nuoscexe, cmdl_file, data_file

    #     import nuosc
    #     d = nuosc.read_param_file(cmdl_file)
    #     base = os.path.splitext(data_file)[0]
    #     d['data'] = data_file
    #     d['info'] = base + '.info'
    #     d['cmdline'] = base + '.cmdline'
    #     cmd = [nuoscexe]
    #     cmd += ['--%s=%s' % kv for kv in d.items()]
    #     cmd = ' '.join(cmd)
    #     print cmd
    #     return task.exec_command(cmd)
        
    # bld(rule = run_nuosc,
    #     #source = [nuoscexe, "nodes.cmdline"],
    #     source = ["nodes.cmdline"],
    #     target = "nodes.data")



    frame_pattern = 'movie/frame_{ind:03d}.gif'
    frame_0 = frame_pattern.format(ind=0)
    bld(rule='python ${SRC[0].abspath()} ${SRC[1].abspath()} %s'%frame_pattern,
        source = 'movie.py movie.nop',
        target = frame_0)

    bld(rule='${IM_CONVERT} -delay 10 ${SRC[0].parent.abspath()}/*.gif -loop 0 ${TGT[0].abspath()}',
        source = frame_0,
        target = 'movie.gif')
